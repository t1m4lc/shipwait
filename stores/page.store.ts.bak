import { defineStore } from "pinia";
import type { Database, Tables } from "~/types/supabase";

export type PageTemplate = Tables<"custom_page_template">;
export type Page = Tables<"pages">;

/**
 * Generic API response type for consistent return patterns
 */
export type ApiResponse<T = any> = {
  success: boolean;
  data?: T;
  error?: string;
};

export const usePageStore = defineStore("page", () => {
  const user = useSupabaseUser();
  const supabase = useSupabaseClient<Database>();
  const config = useRuntimeConfig();

  // State
  const template = ref<PageTemplate | null>(null);
  const page = ref<Page | null>(null);
  const isLoading = ref(false);
  const lastError = ref<string | null>(null);

  // Computed
  const publicPageUrl = computed(() => {
    const slug = page.value?.slug;
    return slug ? `/p/${slug}` : null;
  });

  const hasDeployedPage = computed(() => !!page.value);

  // Template functions
  async function fetchTemplate(projectId: string): Promise<ApiResponse<PageTemplate | null>> {
    isLoading.value = true;
    lastError.value = null;
    
    try {
      if (!user.value) {
        throw new Error("No authenticated user");
      }

      const { data, error: fetchError } = await supabase
        .from("custom_page_template")
        .select("*")
        .eq("project_id", projectId)
        .limit(1)
        .single();

      if (fetchError) {
        if (fetchError.code === "PGRST116") {
          // No template found, not an error
          template.value = null;
          return { success: true, data: null };
        }
        throw fetchError;
      }

      template.value = data;
      return { success: true, data };
    } catch (err: any) {
      console.error("Error fetching template:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  async function saveTemplate(templateData: {
    id?: string;
    name: string;
    html: string;
    project_id: string;
    created_at?: string;
    updated_at?: string;
  }): Promise<ApiResponse<PageTemplate>> {
    isLoading.value = true;
    lastError.value = null;

    try {
      if (!user.value) {
        throw new Error("No authenticated user");
      }

      let result;
      
      if (templateData.id) {
        // Update existing template
        result = await supabase
          .from("custom_page_template")
          .update({
            ...templateData,
            user_id: user.value.id,
            updated_at: new Date().toISOString(),
          })
          .eq('id', templateData.id)
          .select()
          .single();
      } else {
        // Insert new template
        result = await supabase
          .from("custom_page_template")
          .insert({
            ...templateData,
            user_id: user.value.id,
            updated_at: new Date().toISOString(),
          })
          .select()
          .single();
      }

      if (result.error) throw result.error;
      
      // Update the local state
      template.value = result.data;
      
      return { success: true, data: result.data };
    } catch (err: any) {
      console.error("Error saving template:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  // Page functions
  async function fetchPage(projectId: string): Promise<ApiResponse<Page | null>> {
    isLoading.value = true;
    lastError.value = null;

    try {
      if (!user.value) {
        throw new Error("No authenticated user");
      }

      const { data, error: fetchError } = await supabase
        .from("pages")
        .select("*")
        .eq("project_id", projectId)
        .maybeSingle();

      if (fetchError) throw fetchError;

      page.value = data;
      return { success: true, data };
    } catch (err: any) {
      console.error("Error fetching page:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  async function getPageBySlug(slug: string): Promise<ApiResponse<Page | null>> {
    isLoading.value = true;
    lastError.value = null;

    try {
      const { data, error: fetchError } = await supabase
        .from("pages")
        .select("*")
        .eq("slug", slug)
        .maybeSingle();

      if (fetchError) throw fetchError;

      return { success: true, data };
    } catch (err: any) {
      console.error("Error fetching page by slug:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  async function deployPage(
    projectId: string,
    projectSlug: string,
    templateToUse: PageTemplate
  ): Promise<ApiResponse<{ publicUrl: string }>> {
    isLoading.value = true;
    lastError.value = null;

    try {
      if (!user.value) {
        throw new Error("No authenticated user");
      }

      if (!templateToUse.id) {
        throw new Error("Template must be saved before deployment");
      }

      const pageData = {
        slug: projectSlug,
        project_id: projectId,
        title: templateToUse.name,
        html: templateToUse.html,
        active: true,
        updated_at: new Date().toISOString(),
      };

      // Upsert the page (update if exists, insert if not)
      const { data, error: deployError } = await supabase
        .from("pages")
        .upsert(pageData)
        .select()
        .maybeSingle();

      if (deployError) throw deployError;

      // Update the local state
      page.value = data;
      
      const publicUrl = `${config.public.baseUrl}/p/${projectSlug}`;

      return { success: true, data: { publicUrl } };
    } catch (err: any) {
      console.error("Error deploying page:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  // Initialize page data for project
  async function initializePageData(projectId: string): Promise<ApiResponse<{ 
    template: PageTemplate | null, 
    page: Page | null 
  }>> {
    isLoading.value = true;
    lastError.value = null;
    
    try {
      // Fetch template and page in parallel
      const [templateResult, pageResult] = await Promise.all([
        fetchTemplate(projectId),
        fetchPage(projectId)
      ]);
      
      if (!templateResult.success) {
        throw new Error(templateResult.error);
      }
      
      if (!pageResult.success) {
        throw new Error(pageResult.error);
      }
      
      return { 
        success: true, 
        data: { 
          template: template.value, 
          page: page.value 
        } 
      };
    } catch (err: any) {
      console.error("Error initializing page data:", err);
      lastError.value = err.message;
      return { success: false, error: err.message };
    } finally {
      isLoading.value = false;
    }
  }

  return {
    // State
    template,
    page,
    isLoading,
    lastError,
    
    // Computed
    publicPageUrl,
    hasDeployedPage,
    
    // Template methods
    fetchTemplate,
    saveTemplate,
    
    // Page methods
    fetchPage,
    getPageBySlug,
    deployPage,
    
    // Utility methods
    initializePageData
  };
});
